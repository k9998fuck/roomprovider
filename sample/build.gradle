apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "org.codepond.roomprovider"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main.java.srcDirs += [file("$buildDir/generated/source/kaptKotlin/debug")]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }

    task makeJar(type: Jar) {
        delete("build/libs/myjar.jar")
//    from {
//        String[] include = [
//                "kotlin-runtime-${kotlin_version}.jar",
//                "kotlin-stdlib-${kotlin_version}.jar"
//        ]
//        configurations.compile
//                .findAll { include.contains(it.name) }
//                .collect { it.isDirectory() ? it : zipTree(it) }
//    }
//        from("build/tmp/kotlin-classes/debug"){
//            include 'org/codepond/roomprovider/bean/*'
//            include 'org/codepond/roomprovider/converter/*'
//        }
        from("build/intermediates/javac/debug/classes"){
            include 'org/codepond/roomprovider/bean/*'
            include 'org/codepond/roomprovider/converter/*'
        }
//        from("build/generated/source/kapt/debug"){
//            include 'org/codepond/roomprovider/bean/*'
//            include 'org/codepond/roomprovider/db/*'
//        }
//        from("build/generated/source/kaptKotlin/debug"){
//            include 'org/codepond/roomprovider/bean/*'
//            include 'org/codepond/roomprovider/db/*'
//        }
        //去除路径集下部分的资源
//    exclude "**/R.class"
//    exclude "**/R\$*.class"
//    //只导入资源路径集下的部分资源
//    include "org/roomprovider/bean/RedditPost.class"
        into("build/libs/")
        include("classes.jar")
        rename("classes.jar", "myjar.jar")
    }
//    makeJar.dependsOn(build)

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn(makeJar)
    }

}

dependencies {
    kapt project(':processor')
    kapt deps.room.compiler

    implementation deps.support.app_compat
    implementation deps.room.runtime
    implementation deps.kotlin.stdlib
}



